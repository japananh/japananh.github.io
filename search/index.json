[{"content":"Trong tháng 8, nhờ có chính sách tốt từ công ty và sự có mặt từ một người bạn rất đặc biệt, tôi đã tổ chức được một buổi Workshop về TẬP TẠ chia sẻ kiến thức cho mọi người. Đồng thời để kỷ niệm hai năm hành trình nỗ lực của mình. Hai năm không phải là một quãng thời gian dài, nhưng nhìn lại, tôi thấy mình đã đi được xa hơn cả dự định ban đầu là nâng tạ để giải trí bớt stress.\nTên của Workshop là Starting Strength bởi vì đây là cuốn sách khởi đầu cho tất cả mọi thứ. Từ việc học kỹ thuật 3 động tác trong bộ môn Powerlifting là Deadlifts, Squats và Bench Press cho tới việc nâng trình độ tiếng anh lên một level mới để rồi sau này, tôi đủ level thang gia những buổi phỏng vấn bằng tiếng anh và đọc sách, nghe podcast ít phải tra từ. Giấc mơ làm việc trong môi trường quốc tế với đồng nghiệp từ khắp nơi trên thế giới trở nên thật gần.\nNội dung chính của Workshop bao gồm 4 phần như sau:\nPhần 1 nói về hành trình tập tạ của tôi, bao gồm việc tìm ra chế độ ăn (diet) phù hợp với bản thân, review các giáo trình tập (program) mà tôi đã trải nghiệm và những mặt trái trong ngành công nghiệp thể dục thẩm mỹ. Phần 2 do người bạn đặc biệt của tôi là một Powerlifting Coach nói về Powerlifting ở Việt Nam. Phần 3 chỉ ra những lỗi sai tôi hay thấy trong phòng tập và cách sửa chúng. Phần 4 là hỏi đáp, giải đáp câu hỏi và giao lưu với khán giả. Buổi talk kéo dài đúng 60 phút theo dự tính và dù đã chuẩn bị trước scripts nhưng tôi biết là mình sẽ để cảm xúc dẫn lối hành động theo một hướng khác. Đấy là lý do scripts một kiểu nhưng tới lúc nói thì sẽ khác hoàn toàn mà vẫn đảm bảo nội dung trọng tâm. Tôi nhận ra rằng quá gò bó mình nhớ từng câu từng chữ không phải lúc nào cũng là cách hay (trừ khi bạn có trí nhớ thật là tốt). Để sự ngẫu hứng dẫn dắt bản thân và luyện tập khả năng ứng biến trong các tình huống khác nhau là kỹ năng mà tôi muốn học trong năm nay.\nTôi nghĩ mình không có tham vọng trở thành nhân vật gì đó trong thế giới Powerlifting hay Fitness nói chung. Tôi tham gia môn này với \u0008niềm đam mê và tinh thần thể thao vượt qua chính mình. Có nhiều thứ để học hỏi, trải nghiệm và cải thiện kỹ thuật từng ngày khiến tôi vui. Như vậy là quá đủ cho giải trí.\n","date":"2022-09-03T21:51:29+07:00","image":"https://japananh.github.io/p/starting-strength/cover_hub238a6e2ba54df5886ea0fb227b71a81_1062168_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/starting-strength/","title":"Starting Strength"},{"content":"The blind pianist I attended a piano concert this week. The blind girl played a piece by Chopin that was named Nocturne op .9 No. 2. The melody was so familiar to me that I guessed its name correctly. I wept tears of joy to see her smile and her performance. Although, she made a few mistakes and her face looked worried a bit but for me, she did a great job. When her dark brighten me, I knew hope never ends.\nBen Hoyt This guy created an AWK interpreter that is written in the Go language. He was inspired by the book AWK programming and his father who taught him coding when he was a kid. I was just wondering if I would make the same story when my kid wrote in his/her blog \u0026ldquo;My mom taught me science and programming when I was a kid. She was my inspiration to create XYZ library\u0026rdquo;. For more info about his work, you can check out his blog here.\nBesides his successful career, he also has an amazing life with piano and a fantastic family with his wife and 3 lovely daughters. I enjoy reading their family blog named Alien in the Apple. I hope I would become a great mother someday.\nThe classical music lover I met T, an introverted technical man with a heart for classical music, in the small tech talk about JavaScript that I was a host in 2019 in Hanoi. We exchanged Facebook contact but didn\u0026rsquo;t talk for a long time. I was a shy girl so I read all of his posts and loved them so much but never texted him. He has been practicing guitar for over 10 years. This year, he decided to learn violin. I wanna try to learn the violin to make sure I love it as much as the feeling when I enjoy the violin expert playing pieces of classical music. So I asked him to try his violin. It turned out, that I did love it. We also had a great conversation about violin, physics, and religion.\nWe met again in the Vietnam Museum of Ethnology this week. When he told me about the journey of a woman who bought land in Dalat to live her self-sufficient lifestyle and then realized that her dream was impractical, some pieces of my memories came back. I had a question that I tried to answer for many years since I graduated from high school.\n\u0026ldquo;Why did I turn boring quickly and NOT wanna see people?\u0026rdquo;\n\u0026ldquo;Why did I NOT have any interested in any conversation with anyone for many years?\u0026rdquo;\nAll of his stories were so cute and hilarious with his passion for art and science. He was exactly the type of friend that I usually hung out with when I was in school.\nMost people grow up and lost their ability to be freedom of mind because of their social responsibilities and their willingness. All the conversations I had with them were about career growth, financial advice, or general topics such as weather, food, traveling, etc. Nothing touched my heart. I felt empty and exhausted after that but didn\u0026rsquo;t know why. We smiled. The place was comfortable. I knew there was something wrong but I didn\u0026rsquo;t know what is it. Today was the best day of my life. I found it. FANTASTIC!\n","date":"2022-07-10T23:09:51+07:00","image":"https://japananh.github.io/p/random-people-make-my-day/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/random-people-make-my-day/","title":"Random people make my day"},{"content":"Using runtime.Gosched() to force schedule Goroutines A goroutine can run and occupy a thread for a long time. This should be avoided by using runtime.Gosched() to force schedule Goroutines to switch context.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { go func() { for i := 1; i \u0026lt;= 50; i++ { fmt.Println(\u0026#34;I am Goroutine 1\u0026#34;) } }() go func() { for i := 1; i \u0026lt;= 50; i++ { fmt.Println(\u0026#34;I am Goroutine 2\u0026#34;) } }() time.Sleep(time.Second) } // The result will look like below, // one goroutine held the thread for so long. // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 1 // ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;time\u0026#34; ) func main() { go func() { for i := 1; i \u0026lt;= 50; i++ { fmt.Println(\u0026#34;I am Goroutine 1\u0026#34;) runtime.Gosched() } }() go func() { for i := 1; i \u0026lt;= 50; i++ { fmt.Println(\u0026#34;I am Goroutine 2\u0026#34;) runtime.Gosched() } }() time.Sleep(time.Second) } // The result will look better like below // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 2 // I am Goroutine 2 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 1 // I am Goroutine 2 // I am Goroutine 2 // ... ","date":"2022-06-26T09:00:03+07:00","image":"https://japananh.github.io/p/cool-tricks-with-goroutine/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/cool-tricks-with-goroutine/","title":"Cool tricks with goroutine"},{"content":"I had a requirement to update an API today. The modified function had 8 parameters that break the SonarQube rule, so I decided to refactor it. There are some solutions to the problem. They can be applied similarly in other languages. In this post, I will demonstrate some of them in the Go language.\nFor someone don\u0026rsquo;t know SonarQube: SonarQube is an open-source platform developed by SonarSource for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs, and code smells in 17 programming languages. Use Parameter Object The most common way I often do this is to replace parameters with a data structure such as struct in Go or an object or a class in other languages such as JavaScript.\nThe benefits of it are more readable code and reusable code. Instead of parameters, you see a single object which can be reused somewhere.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Before package service import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; ) // There are 8 parameters here func CreateUser(ctx context.Context, db *sql.DB, email, password, firstName, lastName, addr string, status int) error { // do something return nil } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // After package service import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; ) type CreateUserRequestParams struct { Status int Email, Password, FirstName, LastName, Addr string } // The code is readable thanks to fewer parameters func CreateUser(ctx context.Context, db *sql.DB, p *CreateUserRequestParams) error { // do something return nil } The drawback of it is Data class - the class defines instance variables but lacks relevant methods. Such classes are very likely being manipulated by other classes heavily.\nUse Currying One popular way in Functional programming is to use the Currying. It\u0026rsquo;s named after the guy who invented the technique, Haskell Brooks Curry. People apply this pattern a lot in JavaScript libraries such as lodash. Currying is a transform that makes f(a,b,c) callable as f(a)(b)(c). One of its benefits is to shorten how many arguments a function requires. You can read more about currying here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // After package service import ( \u0026#34;context\u0026#34; \u0026#34;database/sql\u0026#34; ) func CreateUser(ctx context.Context, db *sql.DB) func(email, password, firstName, lastName, addr string, status int) error { return func (email, password, firstName, lastName, addr string, status int) error { // do something return nil } } // You can call it like below // service.CreateUser(ctx, db)(email, password, firstName, lastName, addr, status) Refactor the function with the Extract Method If your function takes too many parameters, it might do too much work and should be broken into smaller functions, consequently, reducing the arguments’ number. The Extract Method technique can be used to achieve this goal.\nConclusion In my case, the Parameter Object is the best choice. I just wanna dive deep into how many ways I can apply to reduce the parameters so that\u0026rsquo;s why I mention other solutions here. Hope that can help you.\n","date":"2022-06-24T09:00:01+07:00","image":"https://japananh.github.io/p/refactoring-part-3/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/refactoring-part-3/","title":"Refactoring - Part 3"},{"content":"Here is my summary of the book What is blockchain?\nBlockchain principles Start with the story of Changpeng Zhao - a blockchain billionaire in less than a year.\nHe created Binance in 2017 a flatform to transfer bitcoin and altcoins.\nNetwork Effects\nFor every user who joins a blockchain, the more valuable that blockchain becomes.\n\u0026hellip; networks that are more open are generally more successful.\nThe sweet spot between permissioned and permissionless. Eliminate the Intermediaries\nStory of apple juice supplement. The more middleman in the process, the more price customers will pay. Where do we have inefficient intermediaries? Who can we eliminate from our supply chain? “Going direct to the customer” has always been a way to save money for both producers and consumers. where can we eliminate steps in our supply chain? Where can we replace a centralized record keeper with a decentralized ledger? Where can we eliminate an intermediary? That’s where a blockchain solution is often hiding. Code, Not Contracts\nA contract is paperwork that records a transaction between two or more parties. A smart contract is computer code that establishes agreements between parties and then executes the transaction when certain conditions are met, without the need for a third party. Still don’t understand the idea of it??? Forking bitcoin should be avoidable for 2 main reasons\nYou lose users You are more likely to fork again Four simple principles of a blockchain project: Free, Instant, Scalable, and Trusted.\nThe story of blockchain in 2017-2018 periods: Evolution vs Revolution\n","date":"2022-02-27T22:45:45+07:00","image":"https://japananh.github.io/p/summary-of-the-book-what-is-blockchain/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/summary-of-the-book-what-is-blockchain/","title":"Summary of the book \"What is blockchain?\""},{"content":"The rule of thirds The rules of thirds are developed by Bret Contreras (aka The glutes guy). He is the inventor of Hip Thrust and a world-leading glute expert.\nTo maximize the potential of the glutes, the rules of thirds said that\nIn terms of effort, around 1/3 of your sets should be carried out to failure or 1 rep shy of failure, 1/3 of your sets should be performed to 2-3 reps shy of failure, and 1/3 of your sets should be taken nowhere close to failure.\nSource: https://www.instagram.com/p/BfzRPC2AS_r/?utm_source=ig_embed\nExercise categories Vertically loaded exercises Horizontally loaded exercises Lateral/Rotary loaded exercises - Squat \u0026amp; squat variation- Deadlift \u0026amp; deadlift variation- Leg press- Step-ups- Lunges - Hip thrust and hip thrust variation- Bridges- Frog pump- Back extension- Reverse hypers - Sidekick exercises- Kickback exercises- Hip abduction exercises- Fire hydrant- Lateral band walk- Swings - Develop lower glutes- Low reps: 3 - 10 reps - Develop upper/lower glutes- Medium reps: \u0026gt;= 10 - Develop upper glutes- High reps: \u0026gt;= 15 to AMAP (as much as possible) Vertically loaded glute exercises are the hardest on the body and work lower than upper glute max fibers.\nHorizontal is less taxing overall but highly activates both the upper and lower subdivisions.\nFrontal plane lateral exercises completely target the upper subdivision of the glute max, whereas transverse plane hip abduction and hip external rotation exercises work both the upper and lower fibers.\nTo make things more complicated, you also have blends and combinations of vectors.\nGlute dominant exercises Quad dominant exercises Hamstring dominant exercises - Hip thrust and hip thrust variation - Bridges- Frog pump- Sidekick exercises- Kickback exercises- Hip abduction exercises- Fire hydrant- Lateral band walk- RKC plank - Squat \u0026amp; squat variation- Step-ups- Leg press- Sled pushes - Deadlift \u0026amp; deadlift variation- Back extension- Reverse hypers- Swings- Knee flexion exercises - Hip thrust should be placed at the beginning of your workouts.- Hip abduction exercises are great for burnouts and developing upper glutes. They should be placed at the end of your workouts.- RKC plank is great to work the core and should be the last exercise. - Squats should be placed at the beginning of your workouts.- Step-ups, Leg press should be placed in the middle of your workouts. - Deadlift should be placed at the beginning of your workouts.- Back extension and Reverse hyper exercises elicit higher glutes activation than other hamstring-dominant exercises. Q\u0026amp;A The glute guy said 3 to 5 depending on the volume. I often train my glutes with heavyweights (around 70 - 80% of 1RM - 1 Rep Max). I can only train my glutes 3 days a week. My lower body will be sore. I need 1 - 2 days to recover. But if you use the medium to lightweights, you can train up to 5 times a week.\nLow reps: 3 to 5 Medium: 8 to 10 High reps: \u0026gt; 10 There are no exercises that work for everybody. Everyone is different. I saw a lot of girls with great glutes doing mostly medium/high reps schema. I love low/medium reps schema but I try to keep everything in balance.\nI always start with the low reps exercises: vertically exercises such as Squat or Deadlift or Hip thrust, followed by the medium reps exercises such as squat variation exercises (Split squats, Bulgarian split squats, Step-ups, …) or deadlift variation exercises (single-leg deadlift, back extension, sumo deadlift, …) and finish with the lateral/rotary exercises (15 to AMAP) such as Seated Hip Abduction, Sidekick, Kickback, …\nIf your form is not good, please find a mentor, or at least try to firm yourself when you\u0026rsquo;re working out, then compare your form with the correct way that was taught in the book Starting strengh.\nIt is not easy for a novice to pick the proper weights for each exercise. If you don\u0026rsquo;t have a mentor. Here is the formula that I use to pick up my weight.\nFor example, if you want to do 10 reps of Squats, you should pick a weight that you can do a maximum of 10-12 reps.\nSample templates This is an example of my one-week workout. My workouts change every month depending on my current physique, my mood, my routines, and my goals.\nMonday (reps x sets) Wednesday (reps x sets) Friday (reps x sets) 1. Barbell back squat 5x42. Hip thrust 10x33. Standing pull through 15x34. Cable sidekick 15/legx4 1. Conventional Deadlift 5x42. Split squat 10/legx33. Frog Pump 15x34. Seated hip abduction 20x4 1. Barbell back squat 5x42. Stiff-deadlift 10x33. Cable sidekick 15/legx44. Fire hydrant 20/legx4 Monday (reps x sets) Wednesday (reps x sets) Friday (reps x sets) 1. Barbell hip thrust 10x42. Chin-ups 5x43. Barbell back squats 10x44. Lat Pulldown 10x45. Swings 20*46. Cable sidekick 15/legx47. RKC Plank 30sx1 1. Barbell hip thrust 10x42. Overhead Press 10x43. Split squat 10/legx44. Push-ups 5x45. Frog Pump 10x46. Seated hip abduction 20x47. Landmine 10x1 1. Conventional Deadlift 5x42. Dumbell shoulder press 10x43. Barbell hip thrust 10x44. Chess press 10x45. Banded hip thrust 20x46. Fire hydrant 20/legx47. Hanging leg raise 15x1 You can try sample glute workouts from Bret (aka The Glute Guy - the Hip thrust inventor) here.\nReferences Glute training vectors The rule of thirds https://www.youtube.com/watch?v=UKNqDd_epnI ","date":"2022-02-27T21:44:27+07:00","image":"https://japananh.github.io/p/how-to-grow-glutes/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/how-to-grow-glutes/","title":"How to grow glutes"},{"content":"I started to learn Go last year. Go is one of the most popular programming languages and is the trend in recent years. Also, for a JavaScript-based developer like I, Go is considered an easier approach to learning a strong-typed language compared to C and Java.\nThis article is about my thoughts on some resources that I used to learn Go. Hope it helps you.\nGo tour websites One of the best places to start is the official Go Tour website: https://go.dev/tour. This is an interactive tutorial that you can use to learn Go by running your own code snippets on the website itself.\nThe tour is divided into a set of modules each explaining a different concept with a couple of exercises at the end of each module.\nEffective Go Effective Go is another official resource that is available for free from the official Go website https://golang.org/doc/effective_go.html. I found it really useful especially because is not just a syntax reference but a more complete description of all the major Go features and constructs and how to use them effectively.\nGo by example If you\u0026rsquo;re already understood the basics of the language, https://gobyexample.com is another great website where can find a full code implementation.\n200lab 200lab is created by Viet Tran, a solution architect and technical advisor in Vietnam.\nI learned Golang for scalable backend course. I found the course is really helpful. They don\u0026rsquo;t teach you basic syntax where you can google it as Udemy courses, but great APIs architecture and other tricks to improve your backend performance.\nThey also have a Q\u0026amp;A group where you can post your questions and get answers within a day.\nThey don\u0026rsquo;t teach you how SQL and docker work or their syntax, so you have to google them.\nThe only disadvantage is the content is in Vietnamese.\nGo101 If you\u0026rsquo;re preparing for a Go interview. Or you just want to broaden your knowledge. Go101 is definitely for you. They have quizzes, tricks, and great books. They also cover advanced topics such as Go optimizations.\nGoExercises GoExercises is another awesome website to practice Go concepts via mini-projects.\n","date":"2022-02-03T21:49:28+07:00","image":"https://japananh.github.io/p/where-to-learn-go/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/where-to-learn-go/","title":"Where to learn Go?"},{"content":"How does the Google search engine goes through the over 30 trillion web pages on the internet and find the top 10 results in just half a second, on average?\nGoogle doesn\u0026rsquo;t actually visit every page on the internet every time you ask it something. Google stores information about web pages in databases (table of information, like in Excel), and it uses algorithms that read those databases to decide what to show you.\nCrawl all web pages Google\u0026rsquo;s algorithms build a database of every webpage on the internet. Google uses programs called spiders to \u0026ldquo;crawl\u0026rdquo; over web pages until it finds all of them. The spiders start on a few web pages and add those to Google\u0026rsquo;s list of pages, called \u0026ldquo;index\u0026rdquo;. Then, the spiders follow all the outgoing links on those pages and find a new set of pages, which they add to the index. Next, they follow all the links on those pages, and so on, until Google can\u0026rsquo;t find anything else.\nWord search If you search Google, it grabs your query (the text you typed into the search bar) and looks through its index to find the web pages that are most relevant.\nGoogle uses keyword density to show the most frequently used words on the current page, then find the page that had the most matches.\nPage rank PageRank (PR) is an algorithm used by Google Search to rank web pages in their search engine results. It is named after both the term \u0026ldquo;web page\u0026rdquo; and co-founder Larry Page. According to Google:\nPageRank works by counting the number and quality of links to a page to determine a rough estimate of how important the website is. The underlying assumption is that more important websites are likely to receive more links from other websites.\nFor instance, at a party, you know someone is popular when they\u0026rsquo;re surrounded by other popular people. PageRank gives each web page a score that\u0026rsquo;s based on the PageRank scores of every other page that links to that page.\nSEO SEO (Search engine optimization) is the process of improving the quality and quantity of website traffic to a website or a web page from search engines. The most basic form of SEO is getting more pages linked to your page. SEO also includes plenty more techniques, such as putting the right keywords in your page\u0026rsquo;s title and headings or making all of your site\u0026rsquo;s pages link to each other.\nReferences Swipe to unlock ","date":"2022-01-31T06:42:53+07:00","image":"https://japananh.github.io/p/how-does-google-search-work/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/how-does-google-search-work/","title":"How does Google search work?"},{"content":"Tôi nghĩ rằng sẽ có rất nhiều lân trong đời bạn sẽ thốt lên câu \u0026ldquo;Tôi thấy thật tệ\u0026rdquo; (I\u0026rsquo;m feeling so bad). Tệ thường được gán cho cái mác \u0026ldquo;yếu đuối\u0026rdquo;, \u0026ldquo;kém cỏi\u0026rdquo;, \u0026ldquo;hèn\u0026rdquo;. Điều này là không đúng. Hầu hết cảm giác tệ tới từ sự bất ổn kéo dài trong cuộc sống làm cạn kiệt dopamine và nó là tín hiệu cho thấy bạn cần thay đổi.\nNão bộ không phân biệt được trải nghiệm thật hay giả về mặt cảm xúc. Chừng nào hình ảnh tiêu cực còn chạy vòng vòng trong đầu thì chừng đó thời gian bạn sẽ bị nó nuốt chửng. Lúc này, bạn cần kiếm một việc thật dễ, vui vẻ, lành mạnh, thực hiện nó để cho não bạn được nhảy số sang chủ đề khác.\nBước một, nếu bạn thích xem phim. Điều này chứng tỏ dopamine tăng nhanh khi bạn xem phim. Bạn nên có sẵn 1 list các danh sách các phim có nội dung vui vẻ, hài hước, tránh những phim nhiều cảm xúc tiêu cực. Vì trong lúc rối bời có thể bạn sẽ chọn nhầm một phim có nội dung tệ và nguy cơ thất vọng (tụt dopamine) cao.\nBước hai, sau khi bình tĩnh hơn, nhờ nạp dopamine từ việc xem phim, bạn nên ngồi xuống và trả lời những câu hỏi sau.\nĐiều gì đã khiến tôi cảm thấy tệ?\nChuyện này bắt đầu từ khi nào? Giọt nước nào đầu tiên rơi vào cái cốc?\nTôi làm gì để cải thiện tình hình bây giờ?\nLàm sao để tôi ngăn điều này xảy ra vào lần tới?\nTrả lời càng kỹ bao nhiêu thì lần sau khả năng tái lỗi của bạn sẽ thấp hơn hẳn. Với tôi, khi tôi đã phải dùng tới phim để tăng mood thì đấy là lúc tôi thấy TỆ NHẤT. Bạn có thể sẽ có câu trả lời khác với tôi.\nBước ba, thực hiện những gì bạn đã viết trong tối thiểu 21 ngày liên tục để chúng trở thành thói quen, tự động đi vào tiềm thức. Thiếu bước này, những thứ bạn viết ra ở bước hai sẽ trở nên vô ích. Một số người xây dựng thói quen lâu hơn người khác và việc này có thể lên tới vài tháng cho tới ba năm. Nếu bạn miss vài ngày, không sao cả. Bạn không phải là siêu nhân.\nChúng ta thường nghĩ là năng lượng tiêu cực tới từ những người xung quanh. Nếu bạn nghĩ đồng nghiệp lười biếng khiến bạn lười biếng theo, bạn có thể thử đổi môi trường. Biết đâu bạn đúng. Nhưng hãy cẩn thận với chính mình.\n","date":"2022-01-23T04:36:17+07:00","image":"https://japananh.github.io/p/i-m-feeling-so-bad/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/i-m-feeling-so-bad/","title":"I'm feeling so bad"},{"content":"We all have people who have changed our lives. People can change your life in a positive or negative way. Master Thich Nhat Hanh is my inspiration to live a better life.\nHis drama talks and his mantras help me overcome my anger. I read this mantra many many times years ago until the anger was gone. If you\u0026rsquo;re dealing with your anger, I hope this helps.\nHe left our beautiful world today. His compassion and his wisdom are still our guides and shell never pass away. \u0026ldquo;I place my faith in Amida Buddha.\u0026rdquo;\nAnger Mantra 1 2 3 4 5 6 7 8 9 10 11 12 Breathing in, I know that anger is here. Breathing out, I know that the anger is not me. Breathing in, I know that anger is unpleasant. Breathing out, I know this feeling will pass. Breathing in, I am calm. Breathing out, I am strong enough to take care of this anger. ","date":"2022-01-23T00:27:52+07:00","image":"https://japananh.github.io/p/who-has-been-an-influence-on-you/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/who-has-been-an-influence-on-you/","title":"Who has been an influence on you?"},{"content":"I\u0026rsquo;m a morning person. My most productive time is in the morning, so I try to accomplish as many things as I can before lunch. It took me a while to find my morning routine with trials and errors. Today, I\u0026rsquo;m gonna share with you my morning routines.\nMaking your bed This is the first thing you should do. I got this advice from Tim Ferriss on his channel on Youtube. You can check it out here. He explained that\nAccomplishing one thing at the beginning of the day no matter what happens with unforeseen variables for the rest of day.\nYou will return to a made bed at the end of the day. As a bookmark beginning an end, it sets you up psychologically to be more productive.\nIf you work at home, an external mess creates an internal mess.\nAwake nervous system The next thing you should do is that awake your nervous system.\nI got this advice from Huberman (an American neuroscientist) in his article. Blue light from sunlight early in the morning can block melatonin, a hormone made in the body to regulate night and day cycles or sleep-wake cycles. It is similar to an alarm that wakes you up in the morning and makes you sleepy in the evening.\nIf seeing the blue light is not enough for you, light exercises such as push-ups, pull-ups, or a few minutes of cardio will help. It can increase your heartbeat, increase your blood oxygen level, and put you in an alert state.\nStay focused Sometimes, you feel alert in the morning but your mind is wandering so you cannot focus on anything. These tips below bring my mind back, so I hope it works for you.\nTim Ferriss introduced me to this technique. You can read anything that excites you. Just wrap a book or a magazine. This technique is effective because it traps your monkey mind on paper so you can get on with your day. I often look at my daily plan and read it out loud.\nBy starting a meditation practice and tuning into your breath and body when you first wake up, you become more aware of your thoughts–and that monkey mind. Some thoughts might make sense while other thoughts seem to come out of nowhere. Especially, when you\u0026rsquo;re wake up after a nightmare.\nBreakfast Some people avoid sugar and think it makes them fat. That\u0026rsquo;s a myth. A little sugar (below 3 grams) is just fine. If your brain doesn\u0026rsquo;t have enough \u0026ldquo;sugar\u0026rdquo;, you will start to crave sweet foods. By saying \u0026ldquo;sugar\u0026rdquo;, I mean you should provide enough energy for your brain in the morning. Energy can come from a lot of sources. I highly recommend people to have whole foods with high carbs or high proteins or a mix with both of them.\nKeep your mouth clean Some people are very busy or lazy so they don\u0026rsquo;t even put a few minutes to clean their mouths. Early meetings make people feel annoyed because of bad breath. Keeping your mouth clean is not only a personal norm but a SOCIAL norm.\nAn article in healthlin.com show that\nWaiting 30 minutes to an hour after eating to brush your teeth is the best way to ensure that you\u0026rsquo;re protecting your teeth and not tampering with your enamel. The American Dental Association recommends you wait 60 minutes after eating before you brush, especially after having acidic foods.\n","date":"2022-01-13T23:25:34+07:00","image":"https://japananh.github.io/p/how-to-create-a-better-morning-routine/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/how-to-create-a-better-morning-routine/","title":"How to create a better morning routine?"},{"content":"Case 1 In forums or groups on social media, I saw some people pop in and say something like that.\nAny JavaScript experts around?\nThis is a bad form, for several reasons. What the person is actually asking here is\nAny JavaScript experts around who are willing to commit to my problem, whatever that might turn out to be, even if it\u0026rsquo;s not actually related to JavaScript could answer my question?\nThere are plenty of reasons why people DO have the knowledge would NOT admit to it. The unclear question proves your laziness. Why people should do the work to solve your problem if you\u0026rsquo;re not willing to do it?\nCase 2 Some people send me a message then stop there until I reply.\nHey, I have a question.\nor\nAlo, I have a bug.\nThey only describe their problems until I ask them to clarify them.\nHi, what\u0026rsquo;s wrong?\nThis is also a bad form. Why not jump into your problem so I don\u0026rsquo;t need to ask an extra question.\nHey, I\u0026rsquo;m reading [book] and I\u0026rsquo;m confused with the [concept]. Could you have time to explain it to me?\nor\nAlo. I do [problem] with JavaScript and [other relevant info]. I tried [what you did] but it didn\u0026rsquo;t work. Could you help me out?\nThe point here is not to ask, just ask.\n","date":"2022-01-05T18:43:04+07:00","image":"https://japananh.github.io/p/don-t-ask-to-ask-just-ask/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/don-t-ask-to-ask-just-ask/","title":"Don't ask to ask, just ask"},{"content":"Chào mọi người, vèo cái đã tới ngày 50. Vậy là tôi đã đi được một nửa quãng đường rồi.\nMọi người có gợi ý gì cho thử thách sắp tới thì comment vào bài nhé.\nTrong bài này, tôi sẽ trích ra một vài ghi chú từ cuốn How emotions are made của Lisa Feldman Barrett. Đây là cuốn sách đầu tiên của năm 2022.\nTôi đọc cuốn này vì muốn hiểu hơn về cảm xúc. Tôi nghĩ lời khuyên Gác cảm xúc sang một bên tới từ sự thiếu hiểu biết hơn là từ sự thấu hiểu. Đây là ví dụ điển hình của xu hướng né tránh những thứ mà bản thân chưa rõ và che đậy nó bằng từ ngữ hoa mỹ.\nThe theory of constructed emotions vs The classical view Tác giả phát triển một lý thuyết kiến tạo xã hội (a social constructionist theory) tên là Lý thuyết về cảm xúc được xây dựng - The theory of constructed emotions.\nLý thuyết về cảm xúc được xây dựng nói rằng não của bạn tạo nên mọi thứ bạn trải nghiệm, bao gồm cả cảm xúc của bạn. Your brain invisibly constructs everything you experience, including emotions.\nThe classical view: Sự kiện bên ngoài thế giới kích hoạt cảm xúc của chúng ta. The classical view is intuitive - events in the world trigger emotional reactions inside of us.\nThe myth of universal emotions Một trong những luận điểm nêu ra ở The classical view là nhận dạng cảm xúc là phổ biến (universal).\nEmotion recognition is universal.\nTức là giả sử bạn cho một người Mỹ và một người Việt Nam hay một ai đó từ những nền văn hóa khác nhìn vào bức ảnh có hình một cô gái vẻ mặt \u0026ldquo;buồn\u0026rdquo; thì họ cùng phải nhận thức được rằng là người trong ảnh đang \u0026ldquo;buồn\u0026rdquo;.\nTuy nhiên, khi thực hiện những thử nghiệm với những nhóm người từ nhiều nền văn hóa khác nhau thì nhóm của Lisa lại nhận thấy tỷ lệ trả lời đúng là 58%, rất thấp. Một vài cảm xúc dễ bị nhầm lẫn với nhau khi chỉ nhìn vào khuôn mặt như sợ hãi, ngạc nhiên, tức giận.\nHọ kết luận rằng nhận dạng cảm xúc phụ thuộc vào cả ngữ cảnh (context) và nhiều yếu tố phức tạp khác chứ không hề \u0026ldquo;universal\u0026rdquo;.\nEmotion concepts Não bạn liên tục tạo ra khái niệm cảm xúc (emotion concepts). Khi nhắc tới \u0026ldquo;buồn rầu\u0026rdquo;, các nerouns của bạn sẽ lục tìm những ký ức phù hợp với từ \u0026ldquo;buồn\u0026rdquo;.\nĐối với một đứa trẻ mới sinh (infant), chưa hề có các khái niệm cảm xúc. Việc hình thành các khái niệm của bé tới từ việc quan sát thế giới. Nếu mẹ \u0026ldquo;cười\u0026rdquo; tức là mẹ đang \u0026ldquo;vui\u0026rdquo;. Khi \u0026ldquo;có nước trên mắt mẹ\u0026rdquo; thì chắc là mẹ \u0026ldquo;buồn\u0026rdquo;.\nKhái niệm cảm xúc bị ảnh hưởng bởi nền văn hóa và môi trường sống.\n","date":"2022-01-03T00:46:52+07:00","image":"https://japananh.github.io/p/day-50/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/day-50/","title":"Day 50"},{"content":"The coronavirus had changed the world and the way we live. I think 2021 was not a challenging year for me. I found it not too difficult to accomplish my career goals and my physical goals. Instead, working from home is pretty cool. I have more spare time to play with my buddies.\nOne article of Fobes wrote that 2022 is going to be Malcolm Gladwell’s Tipping Point Year. This article pointed out 22 predictions of the world in 2022. It provides a lot of retrospective ideas for the new year. I highly recommend you read it.\nhttps://www.forbes.com/sites/michaelgale/2022/01/01/22-predictions-for-2022-and-why-this-is-malcolm-gladwells-tipping-point-year/\nHere are my resolutions for 2022\nDive deep into backend development Dive deep into investing Finish reading list Challenge me physically \u0026amp; mentally Expand my network Moving into a new house Have fun + make fun of myself Try to be useful + help others Add a bit of love to the world Let\u0026rsquo;s go!\n","date":"2022-01-01T23:45:12+07:00","image":"https://japananh.github.io/p/my-resolutions-for-2022/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/my-resolutions-for-2022/","title":"My resolutions for 2022"},{"content":"Kiên Trần là người có ảnh hướng lớn nhất tới lối tư duy học tiếng anh của tôi. Tôi nghĩ muốn giỏi tiếng anh hay bất kỳ lĩnh vực gì, đầu tiên, bạn phải vượt qua được trở ngại niềm tin, tức là bạn phải THỰC SỰ TIN là mình có thể làm được.\nĐọc sách Kiên sẽ giúp bạn TẨY NÃO, khiến bạn tư duy tốt hơn và không còn phải HỌC tiếng anh một ngày nào. Sách không dùng các ví dụ khô khan như các giáo trình tiếng anh thông thường. Với hiểu biết phong phú về nhiều lĩnh vực khác nhau, mỗi cuốn sách của Kiên là một thế giới tràn đầy màu sắc, năng động, và thể hiện rõ tinh thần Bốn chấm không.\nTôi đã đọc hết tất cả các sách của anh. Tuy nhiên, không phải nhận định nào của tác giả tôi cũng đồng tình, tôi sẽ chắt lọc ra những cái phù hợp với mình và bỏ qua toàn bộ cái còn lại.\nNào giờ thì chúng ta sẽ cùng nhau thưởng thức một phần chương 2 của cuốn sách số 8 - **IELTS Speaking Handbook - Understand the exam **\nNội dung sách Thi Speaking sẽ gồm 3 phần. Phần 1 phần 2 và phần 3.\nSection 1: Warm-up.\nTại sao lại có section 1 cho warm up?\nBởi làm gì có ai sẵn sàng ngay lập tức.\nTrên đời này có 2 người lạ gặp nhau, bạn và giám khảo. Sẽ thật awkward cho cả bạn và giám khảo nếu như bắt đầu test ngay lập tức.\nChính vì vậy người ta rất thông minh khi phát minh ra cái section 1 giúp cho bạn và cả giám khảo bình tĩnh.\nƠ này, không phải chỉ có mỗi BẠN cần bình tĩnh, GIÁM KHẢO cũng rất cần bình tĩnh.\nNhân tiện, nếu bạn đang đọc cuốn sách này của mình, khả năng cao bạn là một học sinh “ngoan” – theo nghĩa là overly nice/friendly.\nBạn biết không, đây là điều làm cho bạn có lợi thế hơn rất nhiều những người khác ở các vùng văn hoá khác. Họ quậy hơn và đôi khi còn annoying. Bạn nice và đó là một lợi thế giúp cho giám khảo bình tĩnh.\nHãy nhớ nhiệm vụ của bạn là làm cho giám khảo bình tĩnh, thay vì bạn mong giám khảo làm bạn bình tĩnh.\nVì bạn muốn bản thân bạn ở thế chủ động, bạn muốn bạn cầm đằng chuôi. Suy nghĩ trong đầu bạn không phải là “Liệu giám khảo có nice với mình không nhỉ?”. Suy nghĩ trong đầu của bạn nên là “Mình phải làm gì để làm giám khảo bớt lo lắng và bình tĩnh hơn.”\nHãy luôn luôn suy nghĩ như vậy trong suốt quá trình thi.\n“Hmm, ông ta có vẻ hơi run, chắc ông ta ngại mình”\n“Làm thế nào để giám khảo bớt run?”\n“Làm thế nào để giám khảo bình tĩnh hơn?”\n“Mình sẽ phải nice và nói chậm lại để giám khảo bớt lo lắng.”\nGot it?\nBình luận về chương 2 Ai cũng biết bài thi IELTS Speaking đều có 3 phần. Điều khác biệt làm nên dấu ấn của tác giả ở chương 2 này là cách tư duy làm cho giám khảo bình tĩnh. Một cú lừa bộ não thật khôn khéo rằng bạn đang là người nắm quyền ở đây. Bạn không phải đi thi nữa. Bạn đang ở nhà, chém gió với người ở cửa dưới của bạn.\nTôi đã đọc một cuốn sách mô tả rằng chúng ta có thể tự tưởng tượng ra những hình ảnh và tin rằng chúng là những sự kiện có thật.\nMột người phụ nữ hồi tưởng lại quá khứ rằng mẹ cô ấy mất vì trượt chân xuống hồ bơi khi cô còn bé. Cô đã khẳng định với các nhà khoa học rằng những ký ức đấy hoàn toàn là sự thật. Nhưng rất lâu sau đó, khi tìm được những người chứng kiến cái chết của mẹ cô thì họ phát hiện là bà bị bệnh qua đời chứ không phải như những gì cô gái vẫn tin.\nCon người có khả năng bóp méo ký ức và hoàn toàn tin tưởng điều này là sự thật. Tôi cũng hay dùng phương pháp này để khiến bản thân mình làm những điều đúng đắn nhiều hơn.\nVí dụ, tôi rất lười đọc textbook, vừa dài (cỡ trên 600 trang) và lại khó. Tôi tưởng tượng rằng mình rất quý tác giả, yêu tất cả những gì tác giả làm, ngắm hình tác giả, xem websites, nghĩ về cái bìa sách thật là ngầu\u0026hellip; Kiếm mọi lý do để thích cuốn sách này và vờ như mình rất đam mê nó.\nLúc đầu, tôi sẽ thấy hơi gượng nhưng sau khi đã luyện tập nó một thời dài thì tôi có thể làm việc này một cách tự động. Tôi đã đọc xong được 2 cuốn textbooks vào năm ngoái nhờ phương pháp này.\nTôi nghĩ là việc đọc những cuốn trộn lẫn Anh-Việt kiểu này giúp ích cho tôi khá nhiều trong việc tư duy từ vựng. Đây là lối tư duy thông thường của đa số người học tiếng anh. Phải trải qua 2 bước thì thông tin mới tới não để xử lý.\n1 Tiếng anh -\u0026gt; Tiếng việt -\u0026gt; Thông tin trong não Còn đây là cách bạn tư duy khi đọc sách của Kiên.\n1 Tiếng anh -\u0026gt; Thông tin trong não Giả sử bạn đọc câu\nSẽ thật awkward cho cả bạn và giám khảo nếu như bắt đầu test ngay lập tức.\nỒ có một từ tiếng anh và nếu bạn không biết nghĩa của từ thì bạn hoàn toàn có thể đoán được là \u0026ldquo;bất tiện\u0026rdquo;.\n1 awkward -\u0026gt; Cảm giác lúng túng, xấu hổ trong não Thay vì\n1 awkward -\u0026gt; Tra nghĩa tiếng việt -\u0026gt; Cảm giác lúng túng, xấu hổ trong não ","date":"2021-12-30T04:06:20+07:00","image":"https://japananh.github.io/p/ielts-speaking-handbook-chapter-2-understand-the-exam/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/ielts-speaking-handbook-chapter-2-understand-the-exam/","title":"IELTS Speaking Handbook - Chapter 2 - Understand the exam"},{"content":"What is z-index? The z-index property specifies the stack order of an element.\nUsage An element with greater stack order is always in front of an element with a lower stack order.\nz-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items (elements that are direct children of display:flex elements).\nIf two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top.\n1 2 3 4 5 6 7 8 9 10 \u0026lt;!-- If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. Box 3 is on top of box 1 because it is positioned last in the HTML. Box 2 is on top of box 3 because its z-index is greater than box 3. --\u0026gt; \u0026lt;div class=\u0026#39;container\u0026#39;\u0026gt; \u0026lt;div class=\u0026#39;box box1\u0026#39;\u0026gt;Box 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;box box2\u0026#39;\u0026gt;Box 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;box box3\u0026#39;\u0026gt;Box 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 .container { position: relative; } .box { width: 200px; height: 200px; } .box1 { background-color: pink; position: absolute; } .box2 { background-color: yellowgreen; position: absolute; top: 50px; left: 100px; z-index: 3; } .box3 { background-color: orange; position: absolute; top: 100px; left: 50px; } If two positioned elements overlap, element 1 has a child element A (z-index: 3), element 2 (z-index: 2) has a child element B (z-index: 4). A is on top of B even its z-index is less than B (3 \u0026lt; 4) due to the z-index of the parent element 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. Box 3 is on top of box 1 because it is positioned last in the HTML. Box 2 is on top of box 3 because its z-index is greater than box 3. --\u0026gt; \u0026lt;div class=\u0026#39;container\u0026#39;\u0026gt; \u0026lt;div class=\u0026#39;box box1\u0026#39;\u0026gt;Box 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;box box2\u0026#39;\u0026gt;Box 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;box box3\u0026#39;\u0026gt;Box 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Even box 4 has z-index: 4 is greater than box 2 (z-index: 3), box 2 still on top of box 4 due to z-index of `container2` is 2 --\u0026gt; \u0026lt;div class=\u0026#39;container2\u0026#39;\u0026gt; \u0026lt;div class=\u0026#39;box box4\u0026#39;\u0026gt;Box 4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 .container { position: relative; height: 220px; } .box { width: 200px; height: 200px; border: 1px solid; position: absolute; } .box1 { background-color: pink; } .box2 { background-color: yellowgreen; top: 50px; left: 100px; z-index: 3; } .box3 { background-color: orange; top: 100px; left: 50px; } .container2 { position: relative; height: 220px; z-index: 2; } .box4 { background-color: yellow; top: 0; left: 20px; z-index: 4; } Code demo: Codepen\n","date":"2021-12-30T02:57:47+07:00","image":"https://japananh.github.io/p/z-index-not-working/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/z-index-not-working/","title":"z-index not working?"},{"content":"I was a good student. I got high scores at school. I loved sciences, especially Mathematics. But I didn\u0026rsquo;t know what position I was supposed to do in the future.\nMy early 20s started by dropping out of university. I found it not for me. Students preferred certificates over knowledge. This wasn\u0026rsquo;t how to I used to think when I was 18. I was disappointed and upset.\nTo survive, I became a waitress, then a housekeeper, then a tailor. I live my career on autopilot.\n\u0026ldquo;Life is so boring. How to get out of it?\u0026rdquo; - I wondered.\nIn 2017, I made friends with some Uzbeks. They were computer science students at Inha University. I was curious about what they do in their leisure time. So I asked them if they would like to share what they did. A week later, I wrote my first line of code in C++.\n1 2 3 4 5 6 #include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } I continued to learn to code for fun. It was hard. That\u0026rsquo;s why it was so fun.\n\u0026ldquo;Should I become a coder?\u0026rdquo; - I wondered.\n2 years later, I got my first job as a Web Developer. WOW! I did it without applying for an internship. I tripled my income. Awesome!\nLast year, I experienced burnout and quit my job with no plan. Although this seemed terrible at first, I realized that not a bad decision. I started to acknowledge what I really want to become, what mistakes I made. I built some plans to expand my skillsets during this time.\n4 months later, I got my second job.\nComing from a JavaScript background, I have always wanted to learn a static-typed programming language, this year I picked up Go after reading the reviews about the language.\nNow, 15 months in, I tried to fill the gap between me - an amateur and a professional. I\u0026rsquo;m happy with my career development. I do what I love every day - to build something useful.\nIf you asked me what I was supposed to be in my early 20s. I would say I don\u0026rsquo;t know. I wasn\u0026rsquo;t good at anything and not interested in anything. Now, everything has changed.\nYou can’t connect the dots looking forward; you can only connect them looking backward. – Steve Jobs\n","date":"2021-12-30T01:47:00+07:00","image":"https://japananh.github.io/p/connect-the-dots/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/connect-the-dots/","title":"Connect the dots"},{"content":"I live in a country where most people think emotions should be ignored. Especially, negative emotions such as fear, anger, worry, loneliness, \u0026hellip; I had a very hard time trying to hide all my strong emotions and felt ashamed if someone saw them.\n\u0026ldquo;Hey, you should be BRAVE. Don\u0026rsquo;t cry. Don\u0026rsquo;t let people see your stupid face.\u0026rdquo; - I told myself.\nThe strong emotion is something like a storm. if you try to hide your feelings, they might be accumulated into strong emotions. And you won\u0026rsquo;t develop a way to recognize your feelings correctly.\nFor example, I misunderstood my disappointment and my sleep deprivation with an anxiety disorder. I thought something was wrong with my brain because none of my friends or coworkers behave like that. But in fact, I was just worried about my career path. That was fine for a younger.\nif you acknowledge and transform your emotions instead of ignoring them, you won\u0026rsquo;t be afraid and won\u0026rsquo;t be overwhelmed by them.\nOf course, there are a lot of techniques to help you deal with emotions. Master Thich Nhat Hanh is one of the great people that help me to overcome my existential crisis and my burnout. He had a great Dharma talk about how to deal with strong or difficult emotions. Here is another great post from Plum Village. You can see that all practices are so simple, you can do it everywhere, every day. I hope it helps.\n","date":"2021-12-30T00:29:55+07:00","image":"https://japananh.github.io/p/accept-emotions-as-they-are/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/accept-emotions-as-they-are/","title":"Accept Emotions As They Are"},{"content":"I read Handbook of thinking smart, the third book that was written by a Vietnamese author - Kien Tran. I started to follow him in 2018. His first book - Handbook of IELTS motivated me to learn English from a zero to an intermediate. Although he received a bad reputation due to a fake IELTS certificate and other bad things, I still found a lot of useful advice in his books. Today, I\u0026rsquo;m gonna share the first chapter of this book with you.\nMarginal Revenue vs Marginal Cost (MR vs MC) You make decisions every day. Have you ever considered what you are doing is valuable or not?\nIn this chapter, he introduces a famous concept in economics that you can apply immediately.\nAlways compare Marginal Revenue (MR) and Marginal Cost (MC).\nMR is a benefit you get after you make a product.\nMC is a cost you pay after you make a product.\nYou hesitate to stay up an hour to do some IELTS reading exercises.\nWhat is MR? It is a benefit you get after an hour of practicing IELTS.\nWhat is MC? It is a cost you pay after an hour of practicing IETLS.\nIt\u0026rsquo;s 9 PM. If you stay up to 10 PM, you might finish 10 exercises. So 10 exercises are your MR.\nWill you lose anything in that hour? Not much. You are not sleepy. You only lose an hour for doing something else. Therefore, MR \u0026gt; MC. You lose an hour to finish 10 exercises. You are happy and satisfied.\nExample 2 is similar to the one above, but instead of 9 PM to 10 PM, it is 3 AM to 4 AM.\nWhat is MR? It is a benefit you get after an hour of practicing IELTS. You\u0026rsquo;ll be sleepy, so you might not finish 10 exercises. Maybe 7. MR is 7 exercises.\nWhat is MC? It is a cost you pay after an hour of practicing IETLS. You stay up very late, your cost is very high. You might wake up languidly the next morning and couldn\u0026rsquo;t focus on anything.\nIn that situation, you should NOT stay up late to practice IELTS because of MR \u0026lt; MC.\nConclusion MR and MC always exist in most situations. To make a better decision, you should determine them quickly.\nAlways compare MR with MC when making decisions on when.\n","date":"2021-12-26T01:02:35+07:00","image":"https://japananh.github.io/p/handbook-of-thinking-smart-marginal-revenue-vs-marginal-cost/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/handbook-of-thinking-smart-marginal-revenue-vs-marginal-cost/","title":"Handbook of thinking smart - Marginal Revenue vs Marginal Cost"},{"content":"Go team released Go 1.18 Beta 1 in December 2021, introducing support for generic programming using type parameters, a much-anticipated feature.\nNote: If you prefer, you can use the Go playground in “Go dev branch” mode to try new features with generics.\nWhat is new in generics? Type parameter lists look like ordinary parameter lists with square brackets. It is customary to start type parameters with upper-case letters to emphasize that they are types.\n1 [P, Q constraint1, R constraint2] Let\u0026rsquo;s take a look at the function min below.\n1 2 3 4 5 6 7 8 9 func min(x, y int) int { if x \u0026lt; y { return x } return y } m := min(2, 3) fmt.Println(m) // 2 If we want this function to work with other number types such as float64, we need to declare a new function to handle the new type. To solve that problem, we use generics. The type parameter T, declared in a type parameter list, takes the place of int.\n1 2 3 4 5 6 7 8 9 10 func min[T constraints.Ordered](x, y T) T { if x \u0026lt; y { return x } return y } m := min[int](2, 3) n := min[float64](2, 3) fmt.Println(m, n) // 2 2 Type parameter lists also have a type for each type parameter. This type defines a set of types. It is called the type constraint. In Go, type constraints must be interfaces.\nLet\u0026rsquo;s take a look at the example below.\n1 func min[T constraints.Ordered](x, y T) T constraints.Ordered is a type constraint. Ordered defines the set of all integer, floating-point, and string types.\n~T means the set of all types with the underlying type T.\nCheck this discussion for more information.\n1 2 3 4 5 6 // Package constraints define a set of useful constraints to be used with type parameters. package constraints type Ordered interface { int | float | ~string } When declaring a variable without specifying an explicit type (either by using the := syntax or var = expression syntax), the variable\u0026rsquo;s type is inferred from the value on the right-hand side.\n1 2 var i int j := i // j is an int You can call the min function without type inference. Sometimes, passing type arguments lead to more verbose code.\n1 2 3 4 5 6 func min[T constraints.Ordered](x, y T) T var a float64 = 1.1 var b float64 = 2.2 var m float64 = min(a, b) // not need to pass any type of argument here. fmt.Println(m) // 1.1 References https://go.dev/blog/go1.18beta1 https://www.youtube.com/watch?v=35eIxI_n5ZM ","date":"2021-12-24T17:36:51+07:00","image":"https://japananh.github.io/p/generics-in-go/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/generics-in-go/","title":"Generics in Go"},{"content":"Albert Einstein had a quote\nAnyone who has never made a mistake has never tried anything new.\nBut one shouldn\u0026rsquo;t repeat his mistakes. It is best to learn from them and capture them forever.\nHere are the mistakes I have made when I started to learn Go.\n1. Import for side effect Issue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package main import ( \u0026#34;encoding/base64\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;image\u0026#34; // missing import for package image/jpeg \u0026#34;log\u0026#34; \u0026#34;strings\u0026#34; ) func main() { reader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(data)) m, _, err := image.Decode(reader) if err != nil { log.Fatal(err) } fmt.Println(m) } const data = ` /9j/4AAQSkZJRgABAQIAHAAcAAD/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkzODdA SFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2NjY2NjY2Nj Y2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCABnAJYDASIAAhEBAxEB/8QA HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq 8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDlwKMD0pwzSiuK57QzGDxS7D6in8Y5ximnAPUfSlcq4m3ilUYp 2OKXHvRcVxnTtS7c07HNFK4DQPakC4PNOA+tOx70XAjK/So5gBGP94fzqfvUVx/qxx/EP51UXqRP4WSE cmgjilP3jSEZqS0IO/NGDnpUiocDg/McDjvV6HTPOdVWYgsM5KcfzzQ2JySM2jp6VYu7SWzmMUwG4cgj kMPUVBjjtTGtRu0Zopw+lFFxhinrGzuqqMsxAA9yaXFSRv5cqSEcIwYj6GpuZ30O30fSLKzhUpbpNMv3 5XGTn29BV28jt7pPLuIVljPBBFVreYx+VbqAjycgt3x14zRcNOxGyVFHQkIc/wA61exyKLbuzjdZ046d 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 ` 1 image: unknown format Solution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 package main import ( \u0026#34;encoding/base64\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;image\u0026#34; \u0026#34;log\u0026#34; \u0026#34;strings\u0026#34; // Package image/jpeg is not used explicitly in the code below, // but is imported for its initialization side-effect, which allows // image.Decode to understand JPEG formatted images. _ \u0026#34;image/jpeg\u0026#34; ) func main() { reader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(data)) m, _, err := image.Decode(reader) if err != nil { log.Fatal(err) } fmt.Println(m) } const data = ` /9j/4AAQSkZJRgABAQIAHAAcAAD/2wBDABALDA4MChAODQ4SERATGCgaGBYWGDEjJR0oOjM9PDkzODdA SFxOQERXRTc4UG1RV19iZ2hnPk1xeXBkeFxlZ2P/2wBDARESEhgVGC8aGi9jQjhCY2NjY2NjY2NjY2Nj Y2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2P/wAARCABnAJYDASIAAhEBAxEB/8QA HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq 8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDlwKMD0pwzSiuK57QzGDxS7D6in8Y5ximnAPUfSlcq4m3ilUYp 2OKXHvRcVxnTtS7c07HNFK4DQPakC4PNOA+tOx70XAjK/So5gBGP94fzqfvUVx/qxx/EP51UXqRP4WSE cmgjilP3jSEZqS0IO/NGDnpUiocDg/McDjvV6HTPOdVWYgsM5KcfzzQ2JySM2jp6VYu7SWzmMUwG4cgj kMPUVBjjtTGtRu0Zopw+lFFxhinrGzuqqMsxAA9yaXFSRv5cqSEcIwYj6GpuZ30O30fSLKzhUpbpNMv3 5XGTn29BV28jt7pPLuIVljPBBFVreYx+VbqAjycgt3x14zRcNOxGyVFHQkIc/wA61exyKLbuzjdZ046d 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 ` 1 \u0026amp;{[44 44 45 46 46 47 48 48 42 42 42 42 42 42 42 42 42 42 42 43 45 49 52 53 46 46 46 4 ... 165 169] 160 80 YCbCrSubsampleRatio420 (0,0)-(150,103)} 2. Unexpected new-line Issue\n1 2 3 4 5 6 7 8 func main() { const fruits = []string{ \u0026#34;cherry\u0026#34;, \u0026#34;banana\u0026#34; // Missing a comma here `,` } fmt.Println(fruits) } 1 ./model.go:6:17: syntax error: unexpected newline, expecting comma or } Solution\n1 2 3 4 5 6 7 8 func main() { const fruits = []string{ \u0026#34;cherry\u0026#34;, \u0026#34;banana\u0026#34;, } fmt.Println(fruits) // [\u0026#34;cherry\u0026#34;, \u0026#34;banana\u0026#34;] } 3. Unaltered strings Issue: Strings are immutable in Go\n1 2 3 4 5 6 func main() { fruit := \u0026#34;cherry\u0026#34; fruit[0] = \u0026#34;C\u0026#34; fmt.Println(fruit) // error here } 1 ./model.go:7:14: cannot assign to fruit[0] (strings are immutable) Solution\n1 2 3 4 5 6 func main() { fruit := []rune(\u0026#34;cherry\u0026#34;) fruit[0] = \u0026#39;C\u0026#39; s := string(fruit) fmt.Println(s) // Cherry } ","date":"2021-12-23T04:16:17+07:00","image":"https://japananh.github.io/p/go-common-mistakes-part-1/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/go-common-mistakes-part-1/","title":"Go common mistakes - Part 1"},{"content":"F-Shaped Pattern Năm 2006, các nhà khoa học ở Trung tâm Nielsen của Mỹ đã công bố nghiên cứu cho thấy người dùng thường đọc các trang Web theo hình chữ F: hai sọc ngang tiếp theo là một sọc dọc. Từ F là viết tắt của từ fast (Nhanh).\nHọ ghi hình 232 người nhìn vào hàng ngàng trang web và phát hiện ra mô hình đọc trông giống hình chữ F và có ba yếu tố như sau:\nNgười dùng bắt đầu đọc theo chiều ngang, thường nằm ở vị trí đầu của nội dung. Sau đó, di chuyển mắt xuống một chút, rồi lại di chuyển mắt tạo thành một đường ngang số hai. Cuối cùng, người dùng quét mặt trái của nội dung theo chuyển động dọc. Quá trình này có thể diễn ra nhanh hoặc chậm. Chuyển động cuối này tạo thành cái đuôi của chữ F. Hàm ý của F pattern Người dùng không đọc từng chữ một. Họ sẽ cố gắng đọc nhanh nhất có thể để lấy thông tin. Hai đoạn văn đầu tiên phải chứa những thông tin quan trọng nhất. Bắt đầu các tiêu đề phụ, đoạn văn và gạch đầu dòng bằng các từ mang thông tin mà người dùng sẽ nhận thấy khi quét xuống phía bên trái của nội dung của bạn ở gốc cuối cùng của chữ F. Họ sẽ đọc từ thứ ba trên một dòng ít thường xuyên hơn nhiều so với hai từ đầu tiên. Tài liệu tham khảo F-Shaped Pattern For Reading Web Content (original study) ","date":"2021-12-12T02:11:53+07:00","image":"https://japananh.github.io/p/f-shaped-pattern/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/f-shaped-pattern/","title":"F-Shaped Pattern"},{"content":"1. Explain packages in Go. Every Go program is made up of packages. The program starts running in package main. This program is using packages with import paths such as fmt.\n1 2 3 4 5 6 7 8 9 package main import ( `fmt` ) func main() { fmt.Println(\u0026#34;Hello word!\u0026#34;) } 2. What is GOPATH? The GOPATH is an environment variable that determines the location of the workspace. It is the only variable that you have to set when developing Go code.\n3. How to use custom packages? You have the folder structure and two files as below.\n1 2 3 4 5 6 src/ myproject/ mylib/ mylib.go ... main.go mylib.go\n1 2 3 4 5 package mylib type SomeType struct { ... } main.go\n1 2 3 4 5 6 7 8 9 package main import ( \u0026#34;mylib\u0026#34; ) func main() { ... } If you want to use mylib in main.go, you could go like this:\nPlace the directory with library files under the directory of your project.\nIn the rest of your project, refer to the library using its path relative to the root of your workspace containing the project.\nNow, in the top-level main.go, you could import \u0026ldquo;myproject/mylib\u0026rdquo; and it would work.\nmain.go\n1 2 3 4 5 6 7 8 9 package main import ( \u0026#34;myproject/mylib\u0026#34; // WORK ) func main() { ... } 4. Explain what is goroutine and how to stop goroutine? A goroutine is a function that is capable of running concurrently with other functions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string) { for i := 1; i \u0026lt;= 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\u0026#34;world\u0026#34;) say(\u0026#34;hello\u0026#34;) } 1 2 3 4 5 6 7 8 9 10 11 $ go run main.go world hello hello world world hello hello world world hello To stop goroutine, you pass the goroutine a signal channel, that signal channel is used to push a value into when you want the goroutine to stop. The goroutine polls that channel regularly as soon as it detects a signal, it quits.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func say(s string, quit chan bool) { defer close(quit) for i := 1; i \u0026lt;= 5; i++ { fmt.Println(s, i) if i == 3 { quit \u0026lt;- true } } for { select { case \u0026lt;-quit: return default: // Do other stuff } } } func main() { // a channel to signal that it\u0026#39;s stopped quit := make(chan bool) go say(\u0026#34;Hello\u0026#34;, quit) // Sleep the program to avoid go routine is forced to exit because `main()` exits time.Sleep(1000 * time.Millisecond) } 1 2 3 4 $ go run main.go Hello 1 Hello 2 Hello 3 ","date":"2021-12-12T01:36:22+07:00","image":"https://japananh.github.io/p/go-interview-questions-and-answers/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/go-interview-questions-and-answers/","title":"Go interview questions and answers"},{"content":"In this post, I\u0026rsquo;ll analyze an interview question. The purpose of these questions is to test candidates\u0026rsquo; technical knowledge, coding ability, problem-solving skills, and creativity. If you can\u0026rsquo;t find a complete solution, it might be ok.\nYou can find all code samples here.\nProblem I was given an array of strings and a word. I need to create a function to test whether that word is in the array or not.\n1 2 3 4 // input: [\u0026#34;car\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;bar\u0026#34;] isInDict(\u0026#34;car\u0026#34;) // true isInDict(\u0026#34;cat\u0026#34;) // true isInDict(\u0026#34;at\u0026#34;) // false Version 1 Array.includes in isInDict() has a time complexity is O(n).\n1 2 3 4 5 6 7 8 9 class Dictionary { constructor(words) { this.dict = words } isInDict(word) { return this.dict.includes(word) // O(n) } } 1 2 3 4 const dict = new Dictionary([\u0026#39;car\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;bat\u0026#39;]) console.log(dict.isInDict(\u0026#39;cat\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;car\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;ba\u0026#39;)) // false Version 2 I can improve the time complexity from O(n) to a constant time O(1) by using Set.has().\n1 2 3 4 5 6 7 8 9 class Dictionary2 { constructor(wordArr) { this.dict = new Set(wordArr) } isInDict(word) { return this.dict.has(word) // O(1) } } 1 2 3 4 const dict = new Dictionary([\u0026#39;car\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;bat\u0026#39;]) console.log(dict.isInDict(\u0026#39;cat\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;car\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;ba\u0026#39;)) // false Version 3 My code will fail if I pass a regex into the isInDict function.\n1 2 3 4 const dict = new Dictionary([\u0026#39;car\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;bat\u0026#39;]) console.log(dict.isInDict(\u0026#39;cat\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;ca*\u0026#39;)) // false -\u0026gt; incorrect console.log(dict.isInDict(\u0026#39;*at\u0026#39;)) // false -\u0026gt; incorrect To solve the problem, I create a new data structure. It might look like this.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Dictionary { dict: { car: true, \u0026#39;*ar\u0026#39;: true, \u0026#39;c*r\u0026#39;: true, \u0026#39;ca*\u0026#39;: true, bar: true, \u0026#39;b*r\u0026#39;: true, \u0026#39;ba*\u0026#39;: true, cat: true, \u0026#39;*at\u0026#39;: true, \u0026#39;c*t\u0026#39;: true, bat: true, \u0026#39;b*t\u0026#39;: true } } After refactoring the constructor(), the final code will look like this.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Dictionary { constructor(words) { this.dict = words.reduce((acc, word) =\u0026gt; { acc[word] = true word.split(\u0026#39;\u0026#39;).forEach((letter, i) =\u0026gt; { const start = word.slice(0, i) const end = word.slice(i + 1) const partialWord = `${start}*${end}` acc[partialWord] = true }) return acc }, {}) } isInDict(word) { return !!this.dict[word] } } 1 2 3 4 const dict = new Dictionary([\u0026#39;car\u0026#39;, \u0026#39;bar\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;bat\u0026#39;]) console.log(dict.isInDict(\u0026#39;cat\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;ca*\u0026#39;)) // true console.log(dict.isInDict(\u0026#39;*at\u0026#39;)) // true ","date":"2021-12-09T01:28:50+07:00","image":"https://japananh.github.io/p/how-to-solve-a-coding-interview-question/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/how-to-solve-a-coding-interview-question/","title":"How to solve a coding interview question?"},{"content":"in Part 1, we discussed the Extract function and how to apply it. Today, I\u0026rsquo;ll introduce you to the Extract variable.\nThis post was inspired by the book Refactoring, which was written by Martin Fowler and Kent Beck.\nExtract variable For example, you have these pieces of code like below.\n1 2 3 4 ... return order.quantity * order.itemPrice - math.max(0, order.quantity - 500) * order.itemPrice * 0.05 + math.min(order.quantity * order.itemPrice * 0.1, 100) That code can be broken into local variables as below.\n1 2 3 4 5 6 ... basePrice := order.quantity * order.item.Price quantityDiscount = math.max(0, order.quantity - 500) * order.itemPrice * 0.05 shipping := math.min(order.quantity * order.itemPrice * 0.1, 100) return basePrice - quantityDiscount - shipping Expressions can become very complex and hard to read. In such situations, local variables may help break the expression down into something more manageable. This allows us to better understand the purpose of what\u0026rsquo;s happening.\nBy extracting a variable, you add a name to the expression in your code. You have to ensure the expression you want to extract does not have side effects and your variable is immutable.\n","date":"2021-12-06T01:32:52+07:00","image":"https://japananh.github.io/p/refactoring-part-2/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/refactoring-part-2/","title":"Refactoring - Part 2"},{"content":"This post was inspired by the book Refactoring, which was written by Martin Fowler and Kent Beck.\nExtract Function The term \u0026ldquo;function\u0026rdquo; can be interchanged with \u0026ldquo;method\u0026rdquo; in an object-oriented language. The idea behinds it is that you look at a fragment of code, understand what it is doing, then extract it into its own function named after its purpose. With this principle, you can develop a habit of writing very small functions.\nTake a look at the code below. We have a struct Rectangle and a method PrintInfo() to log the name and area of it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import \u0026#34;fmt\u0026#34; type Rectangle struct { name string width int height int } func (s *Rectangle) PrintInfo() { fmt.Println(\u0026#34;name:\u0026#34; + s.name) area := s.height * s.width fmt.Println(\u0026#34;Area:\u0026#34; + fmt.Sprintf(\u0026#34;%d\u0026#34;, area)) } func main() { rect := Rectangle{\u0026#34;Rect 1\u0026#34;, 10, 5} rect.PrintInfo() // Name:Rect 1 // Area:50 } Applying the extract function rule here, we can extract calculation part area := s.height * s.width into a new method GetArea. Imagine you have a ton of calculations in PrintInfo(), the extract function will improve readability in your code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \u0026#34;fmt\u0026#34; type Rectangle struct { name string width int height int } func (s *Rectangle) PrintInfo() { fmt.Println(\u0026#34;name:\u0026#34; + s.name) fmt.Println(\u0026#34;Area:\u0026#34; + fmt.Sprintf(\u0026#34;%d\u0026#34;, s.GetArea())) } func (s *Rectangle) GetArea() int { return s.height * s.width } func main() { rect := Rectangle{\u0026#34;Rect 1\u0026#34;, 10, 5} rect.PrintInfo() // Name:Rect 1 // Area:50 } ","date":"2021-12-06T01:07:27+07:00","image":"https://japananh.github.io/p/refactoring-part-1/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/refactoring-part-1/","title":"Refactoring - Part 1"},{"content":"Overview Go tools are the great features that exist alongside the language as part of the go command. Almost Go tools come together with Go installation, but there are some you might install depending on your needs.\nInstallation The easiest way to install a Go tool is to run go get -u golang.org/x/tools/.... Another way to do it is to git clone the repository to $GOPATH/src/golang.org/x/tools.\nThere are some helpful flags:\n-u forces the tool to sync with the latest version of the repo.\n-d if you just want to clone a repo to your GOPATH and skip the building and installation phase.\nTools go vet The vet command will check your code for common errors. Let\u0026rsquo;s look at the types of errors vet can catch:\nBad parameters in Printf-style function calls Method signature errors for common method definitions Bad struct tags Unkeyed composite literals 1 2 3 4 5 6 7 8 package main import \u0026#34;fmt\u0026#34; func main() { // Printf calls whose arguments do not align with the format string. fmt.Printf(\u0026#34;The quick brown fox jumped over lazy dogs\u0026#34;, 3.14) } 1 2 $ go vet main.go main.go:6: no formatting directive in Printf call go list It lists the packages named by the import paths, one per line.\ngo env It prints Go environment information.\n1 2 3 4 5 $ go env GO111MODULE=\u0026#34;\u0026#34; GOARCH=\u0026#34;amd64\u0026#34; GOBIN=\u0026#34;\u0026#34; ... If there are specific values that you\u0026rsquo;re interested in, you can pass them as arguments to go env.\n1 2 3 4 $ go env GOPATH GOOS GOARCH /home/nana/go linux amd64 go fmt Gofmt is a tool that automatically formats Go source code.\nTo format your code, you can use the gofmt tool directly:\n1 gofmt -w yourcode.go Or you can use the “go fmt” command:\n1 go fmt path/to/your/package It also supports rewrite rules that you can use to help refactor your code.\n1 2 3 4 5 6 var foo int func bar() { foo = 1 fmt.Println(\u0026#34;foo\u0026#34;) } 1 2 3 4 5 6 7 8 9 $ gofmt -d -w -r \u0026#39;foo -\u0026gt; Foo\u0026#39; . -var foo int +var Foo int func bar() { -\tfoo = 1 +\tFoo = 1 fmt.Println(\u0026#34;foo\u0026#34;) } ","date":"2021-12-02T23:47:01+07:00","image":"https://japananh.github.io/p/go-tools-part-1/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/go-tools-part-1/","title":"Go Tools - Part 1"},{"content":"Imports The import statement tells the compiler where to look on disk to find the package you want to import.\n1 import \u0026#34;fmt\u0026#34; To import more than one package, you need to wrap the import statements in an import block.\n1 2 3 4 import ( \u0026#34;fmt\u0026#34; \u0026#34;strings\u0026#34; ) Packages are found on disk based on their relative path to the directories referenced by GOPATH. If the compiler cannot find the package you\u0026rsquo;ve referenced in your GOPATH, you\u0026rsquo;ll get an error when trying to run or build your program.\nThe Go tooling has built-in support for fetching source code from distributed version control systems (DVCS) such as sharing sites likes Github.\nFor example:\n1 import \u0026#34;github.com/dgrijalva/jwt-go\u0026#34; When an imported path contains a URL, the Go tooling can be used to fetch the package from the DVCS and place the code inside the GOPATH at the location that matches the URL.\nPackages with the same name can be imported by using named imports.\n1 2 3 4 5 6 7 8 9 10 11 package main import ( \u0026#34;fmt\u0026#34; myfmt \u0026#34;mylib/fmt\u0026#34; ) func main() { fmt.Println(\u0026#34;Standard library\u0026#34;) myfmt.Println(\u0026#34;My custom library\u0026#34;) } The Go compiler will fail the build and output an error whenever you import a package that you don\u0026rsquo;t use.\nGo doesn\u0026rsquo;t allow any unused variable. Any unused variable can be replaced with the _ (underscore character), known as the blank identifier. A blank import of a package is used when the imported package is not being used in the current program, but we need the init function in the Go source files belonging to that package can be called and initialization of variables in that package can be done properly.\nAs an example mysql package is used as blank import for its side-effect of registering the mysql driver as a database driver in the init() function of mysql package, without importing any other functions.\n1 _ \u0026#34;github.com/go-sql-driver/mysql\u0026#34; Init Each package has the ability to provide as many init() functions. They are automatically executed before the main() function in the man package is called.\ninit() function is similar to the main() function. It doesn\u0026rsquo;t take any argument nor return anything. Go can support multiple init() functions within one file. They are called in their respective order of declaration within the file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import \u0026#34;fmt\u0026#34; func init() { fmt.Println(\u0026#34;init 1\u0026#34;) } func init() { fmt.Println(\u0026#34;init 2\u0026#34;) } func main() { fmt.Println(\u0026#34;main\u0026#34;) } 1 2 3 4 $ go run main.go init 1 init 2 main The init() functions are great for setting up packages, initializing variables, or performing any other bootstrapping you may need prior to the program running.\nAn example of this is database drivers. They register themselves with the SQL package when their init function is executed at startup because the SQL package can’t know about the drivers that exist when it’s compiled. Let’s look at an example of what an init function might do.\n1 2 3 4 5 6 7 8 9 package postgres import ( \u0026#34;database/sql\u0026#34; ) func init() { sql.Register(\u0026#34;postgres\u0026#34;, new(PostgresDriver)) } This code lives inside your pretend database driver for the PostgreSQL database. When a program imports this package, the init function will be called, causing the database driver to be registered with Go’s sql package as an available driver.\nNow we can tell the sql.Open method to use this driver.\n1 2 3 4 5 6 7 8 9 10 package main import ( \u0026#34;database/sql\u0026#34; _ \u0026#34;https://github.com/goinaction/code/chapter3/dbdriver/postgres\u0026#34; ) func main() { sql.Open(\u0026#34;postgres\u0026#34;, \u0026#34;mydb\u0026#34;) } References Go in action ","date":"2021-12-01T17:25:36+07:00","image":"https://japananh.github.io/p/packages-in-go-part-2/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/packages-in-go-part-2/","title":"Packages in Go - Part 2"},{"content":"Packages All Go programs are organized into groups of files called packages, so that the code has the ability to be included in other projects as smaller reusable pieces.\nLet’s look at the packages that make up Go’s http functionality in the standard library which contains a series of related files with the .go extension.\n1 2 3 4 5 6 7 8 9 net/http/ cgi/ cookiejar/ testdata/ fcgi/ httptest/ httputil/ pprof/ testdata/ Every Go source file belongs to a package. The package declaration must be the first line of code in your Go source file. All the functions, types, and variables defined in your Go source file become part of the declared package.\n1 package \u0026lt;packagename\u0026gt; The convention for naming your package is to use the name of the directory containing it.\nWhen naming your packages and their directories, you should use short, concise, lowercase names, with no under_scores or mixedCaps. They are often simple nouns, such as:\ntime (provides functionality for measuring and displaying time) list (implements a doubly-linked list) http (provides HTTP client and server implementations) Package names may be abbreviated when the abbreviation is familiar to the programmer. Widely-used packages often have compressed names:\nstrconv (string conversion) syscall (system call) fmt (formatted I/O) Keep in mind that a unique name is not required because you import the package using its full path.\nmain package and main() function\nGo programs start running in the main package. It is a special package that is intended to be compiled into a binary executable.\nThe main() function is a special function that is the entry point of an executable program. Let’s see an example of an executable program in Go.\n1 2 3 4 5 6 7 8 9 10 11 // Package declaration package main // Importing packages import ( \u0026#34;fmt\u0026#34; ) func main() { fmt.Println(\u0026#34;Hello, world!\u0026#34;) } 1 go run main.go 1 2 ## Output Hello, world! ","date":"2021-11-30T23:35:24+07:00","image":"https://japananh.github.io/p/packages-in-go-part-1/cover_hud69847427cf8d814ee68447dcdd8d8d0_110810_120x120_fill_q75_box_smart1.jpg","permalink":"https://japananh.github.io/p/packages-in-go-part-1/","title":"Packages in Go - Part 1"}]